{"version":3,"sources":["App.tsx","columns/column1Children/Level3.tsx","columns/column1Children/Level2.tsx","columns/column1Children/Level1.tsx","columns/Column1.tsx","columns/column2Children/Level3.tsx","columns/column2Children/Level2.tsx","columns/column2Children/Level1.tsx","columns/Column2.tsx","columns/column3Children/Level3.tsx","columns/column3Children/Level2.tsx","columns/column3Children/Level1.tsx","columns/Column3.tsx","serviceWorker.ts","index.tsx"],"names":["Color","bg","setBg","colors","LightYellow","Purple","Red","Green","Cyan","useState","newColor","setNewColor","useEffect","setTimeout","className","map","color","key","onClick","style","backgroundColor","getColorByBgColor","Level3","Level2","Level1","Coluna2Context","Consumer","createContext","Provider","value","useContext","Coluna3Context","bgColor","Black","White","App","Column1","Column2","Column3","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5548324e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Column1 from './columns/Column1';\nimport Column2 from './columns/Column2';\nimport Column3 from './columns/Column3';\n\nexport enum Color {\n  LightYellow = 'lightyellow',\n  Purple = 'purple',\n  Red = 'red',\n  Green = 'green',\n  Cyan = 'cyan',\n  Black = 'black',\n  White = 'white',\n}\n\nexport const getColorByBgColor = (bgColor: Color): Color => {\n  switch(bgColor) {\n  case Color.LightYellow:\n  case Color.Cyan:\n    return Color.Black;\n  default:\n    return Color.White;\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Column1 />\n      <Column2 />\n      <Column3 />\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\r\nimport { Color, getColorByBgColor } from '../../App';\r\n\r\ninterface Props {\r\n    bg: Color,\r\n    setBg: Function\r\n}\r\n\r\nexport default ({\r\n    bg,\r\n    setBg\r\n}: Props) => {\r\n    const colors = [\r\n        Color.LightYellow,\r\n        Color.Purple,\r\n        Color.Red,\r\n        Color.Green,\r\n        Color.Cyan,\r\n    ];\r\n    const [ newColor, setNewColor ] = useState<Color>(bg);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNewColor(bg)\r\n        }, 1000)\r\n    }, [bg])\r\n    \r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 3</h6>\r\n            <p>\r\n                Recebeu BG: { newColor || '--' }\r\n            </p>\r\n            {\r\n                colors.map((color: Color, key: number) => {\r\n                    return (\r\n                        <button onClick={ () => setBg(color) } style={{ backgroundColor: color, color: getColorByBgColor(color) }}>\r\n                            { color === (newColor || '--') ? '✓' : '' }{ color }\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport Level3 from './Level3';\r\nimport { Color } from '../../App';\r\n\r\ninterface Props {\r\n    bg: Color,\r\n    setBg: Function\r\n}\r\n\r\nexport default ({\r\n    bg,\r\n    setBg\r\n}: Props) => {\r\n    const [ newColor, setNewColor ] = useState<Color>(bg);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNewColor(bg)\r\n        }, 1000)\r\n    }, [bg])\r\n    \r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 2</h6>\r\n            <p>\r\n                Recebeu BG: { newColor }\r\n            </p>\r\n            <Level3 bg={ newColor } setBg={ setBg } />\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Level2 from './Level2';\r\nimport { Color } from '../../App';\r\n\r\ninterface Props {\r\n    bg: Color,\r\n    setBg: Function\r\n}\r\n\r\nexport default ({\r\n    bg,\r\n    setBg\r\n}: Props) => {\r\n    const [ newColor, setNewColor ] = useState<Color>(bg);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setNewColor(bg)\r\n        }, 1000)\r\n    }, [bg])\r\n    \r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 1</h6>\r\n            <p>\r\n                Recebeu BG: { newColor }\r\n            </p>\r\n            <Level2 bg={ newColor } setBg={ setBg } />\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport './Column.css';\r\nimport Level1 from './column1Children/Level1';\r\nimport { getColorByBgColor, Color } from '../App';\r\n\r\nexport default () => {\r\n    const [ bg, setBg ] = useState<Color>(Color.LightYellow);\r\n    \r\n    return (\r\n        <div className=\"Column\" style={{ backgroundColor: bg, color: getColorByBgColor(bg) }}>\r\n            <h1>Coluna 1</h1>\r\n            <h4>Sem usar Context, enviando as props de filho pra filho</h4>\r\n            <Level1 bg={ bg } setBg={ setBg } />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Coluna2Context } from '../Column2';\r\nimport { Color, getColorByBgColor } from '../../App';\r\n\r\nexport default () => {\r\n    const colors = [\r\n        Color.LightYellow,\r\n        Color.Purple,\r\n        Color.Red,\r\n        Color.Green,\r\n        Color.Cyan,\r\n    ];\r\n    \r\n    return (\r\n        <Coluna2Context.Consumer>\r\n            {\r\n                ({ bg, setBg }) => (\r\n                    <div className=\"ColumnChild\">\r\n                        <h6>Level 3</h6>\r\n                        <p>\r\n                            Recebeu BG: { bg || '--' }\r\n                        </p>\r\n                        {\r\n                            colors.map((color: Color, key: number) => {\r\n                                return (\r\n                                    <button onClick={ () => setBg(color) } style={{ backgroundColor: color, color: getColorByBgColor(color) }}>\r\n                                        { color === (bg || '--') ? '✓' : '' }{ color }\r\n                                    </button>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n        </Coluna2Context.Consumer>\r\n    )\r\n}","import React from 'react';\r\nimport Level3 from './Level3';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 2</h6>\r\n            <Level3 />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Level2 from './Level2';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 1</h6>\r\n            <Level2 />\r\n        </div>\r\n    )\r\n}","import React, { createContext, useState } from 'react';\r\nimport './Column.css';\r\nimport Level1 from './column2Children/Level1';\r\nimport { Color, getColorByBgColor } from '../App';\r\n\r\nexport const Coluna2Context = createContext({\r\n    bg: '',\r\n    setBg: (bg: Color) => {}\r\n})\r\n\r\nexport default () => {\r\n    const [ bg, setBg ] = useState<Color>(Color.LightYellow);\r\n    \r\n    return (\r\n        <div className=\"Column\" style={{ backgroundColor: bg, color: getColorByBgColor(bg) }}>\r\n            <h1>Coluna 2</h1>\r\n            <h4>Exemplo de Contexto (Tag de contexto)</h4>\r\n            <Coluna2Context.Provider value={{ bg: bg, setBg: (bg: Color) => setBg(bg) }}>\r\n                <Level1 />\r\n            </Coluna2Context.Provider>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { Coluna3Context } from '../Column3';\r\nimport { Color, getColorByBgColor } from '../../App';\r\n\r\nexport default () => {\r\n    const colors = [\r\n        Color.LightYellow,\r\n        Color.Purple,\r\n        Color.Red,\r\n        Color.Green,\r\n        Color.Cyan,\r\n    ];\r\n    const { bg, setBg } = useContext(Coluna3Context);\r\n    \r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 3</h6>\r\n            <p>\r\n                Recebeu BG: { bg || '--' }\r\n            </p>\r\n            {\r\n                colors.map((color: Color, key: number) => {\r\n                    return (\r\n                        <button onClick={ () => setBg(color) } style={{ backgroundColor: color, color: getColorByBgColor(color) }}>\r\n                            { color === (bg || '--') ? '✓' : '' }{ color }\r\n                        </button>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Level3 from './Level3';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 2</h6>\r\n            <Level3 />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Level2 from './Level2';\r\n\r\nexport default () => {\r\n    return (\r\n        <div className=\"ColumnChild\">\r\n            <h6>Level 1</h6>\r\n            <Level2 />\r\n        </div>\r\n    )\r\n}","import React, { createContext, useState } from 'react';\r\nimport './Column.css';\r\nimport Level1 from './column3Children/Level1';\r\nimport { Color, getColorByBgColor } from '../App';\r\n\r\nexport const Coluna3Context = createContext({\r\n    bg: '',\r\n    setBg: (bg: Color) => {}\r\n})\r\n\r\nexport default () => {\r\n    const [ bg, setBg ] = useState<Color>(Color.LightYellow);\r\n    \r\n    return (\r\n        <div className=\"Column\" style={{ backgroundColor: bg, color: getColorByBgColor(bg) }}>\r\n            <h1>Coluna 3</h1>\r\n            <h4>Exemplo de Contexto (useContext();)</h4>\r\n            <Coluna3Context.Provider value={{ bg: bg, setBg: (bg: Color) => setBg(bg) }}>\r\n                <Level1 />\r\n            </Coluna3Context.Provider>\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}